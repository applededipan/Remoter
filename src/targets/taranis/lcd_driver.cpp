/**
  ******************************************************************************
  * @file    Project/lcd/lcd.c 
  * @author  FrSky Application Team
  * @Hardware version V0.2
  * @date    11-July-2012
  * @brief   This file provides LCD Init and botom drivers.
  * *
  ******************************************************************************
*/
#include "../../opentx.h"


#define LCD_WRITE_BIT(bit) \
  if (bit) \
    LCD_MOSI_HIGH(); \
  else \
    LCD_MOSI_LOW(); \
  LCD_CLK_LOW(); \
  LCD_CLK_LOW(); \
  LCD_CLK_LOW(); \
  LCD_CLK_HIGH(); \
  LCD_CLK_HIGH();

#if defined(REVPLUS)
void lcdRefresh(bool wait)
{
}

extern "C" void DMA1_Stream7_IRQHandler()
{ 
}


#endif



/*
  Proper method for turning of LCD module. It must be used,
  otherwise we might damage LCD crystals in the long run!
*/
void lcdOff(void)
{

}


void lcdSetRefVolt(uint8_t val)
{
 
}




uint8_t ADDR_CHAR_18[] = {//! hight:14  width:10  28个字节
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x78,0x00,0x78,0x00,0x78,0x00,0x78,0x00,
0x78,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x30,0x00,/*"!",1*/
0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x00,0xCC,0x00,0xCC,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/
0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x00,0xCC,0x00,0xCC,0x00,0xFE,0x01,0xFE,0x01,
0xCC,0x00,0xCC,0x00,0xFE,0x01,0xFE,0x01,0xCC,0x00,0xCC,0x00,/*"#",3*/
0x00,0x00,0x30,0x00,0x30,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x0E,0x00,0x1C,0x00,
0x38,0x00,0x60,0x00,0xC0,0x00,0xC0,0x01,0xCE,0x01,0xFC,0x00,/*"$",4*/
0x00,0x00,0x00,0x00,0x0E,0x00,0xDB,0x00,0xDB,0x00,0x6E,0x00,0x60,0x00,0x30,0x00,
0x30,0x00,0x18,0x00,0x18,0x00,0xCC,0x01,0x6C,0x03,0x66,0x03,/*"%",5*/
0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0xD8,0x00,0x8C,0x01,0xD8,0x00,0x70,0x00,
0x18,0x00,0xCC,0x03,0x86,0x01,0x86,0x00,0xC6,0x00,0xFC,0x01,/*"&",6*/
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/
0x00,0x00,0x00,0x00,0x60,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x0C,0x00,
0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,/*"(",8*/
0x0C,0x00,0x18,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x30,0x00,/*")",9*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0xCC,0x00,0x78,0x00,0xFE,0x01,
0x78,0x00,0xCC,0x00,0x86,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"*",10*/
0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFE,0x01,0xFE,0x01,0x30,0x00,
0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"+",11*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x20,0x00,/*",",12*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",13*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*".",14*/
0x00,0x00,0x80,0x01,0x80,0x01,0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x00,0x30,0x00,
0x30,0x00,0x18,0x00,0x18,0x00,0x0C,0x00,0x0C,0x00,0x06,0x00,/*"/",15*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"0",16*/
0x00,0x00,0x30,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*"1",17*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x80,0x01,0xC0,0x01,0xE0,0x00,0x70,0x00,
0x38,0x00,0x1C,0x00,0x0E,0x00,0xFE,0x01,0xFE,0x01,0x00,0x00,/*"2",18*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x80,0x01,0xC0,0x00,0x70,0x00,0xF0,0x00,
0xC0,0x01,0x80,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"3",19*/
0x00,0x00,0x0C,0x00,0xCC,0x00,0xCC,0x00,0xCC,0x00,0xCC,0x00,0xC6,0x00,0xFE,0x01,
0xFE,0x01,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,/*"4",20*/
0x00,0x00,0xFE,0x01,0xFE,0x01,0x06,0x00,0x06,0x00,0x7E,0x00,0xFE,0x00,0xC0,0x01,
0x80,0x01,0x80,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"5",21*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x06,0x00,0x06,0x00,0x76,0x00,0xFE,0x00,
0xCE,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"6",22*/
0x00,0x00,0xFC,0x01,0xFC,0x01,0x80,0x01,0xC0,0x00,0x60,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*"7",23*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0xCC,0x00,0x78,0x00,0xFC,0x00,
0xCE,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"8",24*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,
0x80,0x01,0x80,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"9",25*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*":",26*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x20,0x00,/*";",27*/
0x00,0x00,0x00,0x00,0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x06,0x00,
0x0C,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x00,0x00,0x00,/*"<",28*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,
0x7C,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"=",29*/
0x00,0x00,0x00,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x00,0x80,0x01,
0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x00,0x00,/*">",30*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0xC0,0x01,0xE0,0x00,0x70,0x00,
0x30,0x00,0x30,0x00,0x00,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*"?",31*/
0x00,0x00,0x78,0x00,0xFC,0x00,0x86,0x01,0x86,0x01,0xE6,0x01,0xF6,0x01,0x96,0x01,
0x96,0x01,0xF6,0x01,0xE6,0x01,0x06,0x00,0xFC,0x01,0xF8,0x01,/*"@",32*/
0x00,0x00,0x30,0x00,0x78,0x00,0xCC,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0xFE,0x01,0xFE,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"A",33*/
0x00,0x00,0x7E,0x00,0xFE,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0xFE,0x00,0xFE,0x00,
0x86,0x01,0x86,0x01,0x86,0x01,0xFE,0x00,0x7E,0x00,0x00,0x00,/*"B",34*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
0x06,0x00,0x06,0x00,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"C",35*/
0x00,0x00,0x7E,0x00,0xFE,0x00,0xC6,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xC6,0x01,0xFE,0x00,0x7E,0x00,0x00,0x00,/*"D",36*/
0x00,0x00,0xFE,0x01,0xFE,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0x7E,0x00,0x7E,0x00,
0x06,0x00,0x06,0x00,0x06,0x00,0xFE,0x01,0xFE,0x01,0x00,0x00,/*"E",37*/
0x00,0x00,0xFE,0x01,0xFE,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0x7E,0x00,0x7E,0x00,
0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,/*"F",38*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0xE6,0x01,
0xE6,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x00,0x00,/*"G",39*/
0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0xFE,0x01,0xFE,0x01,
0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"H",40*/
0x00,0x00,0xFC,0x00,0xFC,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00,/*"I",41*/
0x00,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,
0x80,0x01,0x80,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"J",42*/
0x00,0x00,0xC6,0x00,0xE6,0x00,0x76,0x00,0x3E,0x00,0x1E,0x00,0x0E,0x00,0x1E,0x00,
0x3E,0x00,0x76,0x00,0xE6,0x00,0xC6,0x01,0x86,0x01,0x00,0x00,/*"K",43*/
0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,
0x06,0x00,0x06,0x00,0x06,0x00,0xFE,0x01,0xFE,0x01,0x00,0x00,/*"L",44*/
0x00,0x00,0x86,0x01,0x86,0x01,0xCE,0x01,0xCE,0x01,0xFE,0x01,0xFE,0x01,0xB6,0x01,
0xB6,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"M",45*/
0x00,0x00,0x86,0x01,0x8E,0x01,0x8E,0x01,0x9E,0x01,0x9E,0x01,0xB6,0x01,0xB6,0x01,
0xE6,0x01,0xE6,0x01,0xC6,0x01,0xC6,0x01,0x86,0x01,0x00,0x00,/*"N",46*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"O",47*/
0x00,0x00,0x7E,0x00,0xFE,0x00,0xC6,0x01,0x86,0x01,0x86,0x01,0xC6,0x01,0xFE,0x00,
0x7E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,/*"P",48*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0xE6,0x01,0xEE,0x01,0xFC,0x01,0xB8,0x01,0x00,0x00,/*"Q",49*/
0x00,0x00,0x7E,0x00,0xFE,0x00,0xC6,0x01,0x86,0x01,0x86,0x01,0xC6,0x01,0xFE,0x00,
0x7E,0x00,0xC6,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"R",50*/
0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x0E,0x00,0x1C,0x00,0x38,0x00,0x60,0x00,
0xC0,0x00,0xC0,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"S",51*/
0x00,0x00,0xFE,0x01,0xFE,0x01,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*"T",52*/
0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"U",53*/
0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCC,0x00,0x78,0x00,0x30,0x00,0x00,0x00,/*"V",54*/
0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0xB6,0x01,0xB6,0x01,0xB6,0x01,
0xB6,0x01,0xB6,0x01,0xB6,0x01,0xFE,0x01,0xCC,0x00,0x00,0x00,/*"W",55*/
0x00,0x00,0x86,0x01,0x86,0x01,0xCC,0x00,0xCC,0x00,0x78,0x00,0x30,0x00,0x30,0x00,
0x78,0x00,0xCC,0x00,0xCC,0x00,0x86,0x01,0x86,0x01,0x00,0x00,/*"X",56*/
0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0xCC,0x00,0x78,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x00,0x00,/*"Y",57*/
0x00,0x00,0xFE,0x01,0xFE,0x01,0x80,0x01,0xC0,0x01,0xE0,0x00,0x70,0x00,0x38,0x00,
0x1C,0x00,0x0E,0x00,0x06,0x00,0xFE,0x01,0xFE,0x01,0x00,0x00,/*"Z",58*/
0x00,0x00,0x78,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,/*"[",59*/
0x00,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x30,0x00,
0x30,0x00,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x00,0x80,0x01,/*"\",60*/
0x00,0x00,0x78,0x00,0x78,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,/*"]",61*/
0xCC,0x00,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"_",63*/
0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0xFC,0x00,0x80,0x01,0xFC,0x01,
0xFE,0x01,0x86,0x01,0x86,0x01,0xFE,0x01,0xFC,0x01,0x00,0x00,/*"a",65*/
0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x76,0x00,0xFE,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFE,0x00,0x76,0x00,0x00,0x00,/*"b",66*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x06,0x00,
0x06,0x00,0x06,0x00,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"c",67*/
0x00,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0xB8,0x01,0xFC,0x01,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x00,0x00,/*"d",68*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,
0xFE,0x01,0xFE,0x01,0x0E,0x00,0xFC,0x00,0x78,0x00,0x00,0x00,/*"e",69*/
0x00,0x00,0xF0,0x01,0xF8,0x01,0x18,0x00,0x18,0x00,0xFE,0x01,0xFE,0x01,0x18,0x00,
0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x00,0x00,/*"f",70*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x80,0x01,/*"g",71*/
0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x76,0x00,0xFE,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"h",72*/
0x30,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00,/*"i",73*/
0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x78,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,/*"j",74*/
0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0xC6,0x00,0x66,0x00,0x36,0x00,0x1E,0x00,
0x0E,0x00,0x3E,0x00,0x66,0x00,0xC6,0x00,0x86,0x01,0x00,0x00,/*"k",75*/
0x00,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x00,0xFC,0x00,0x00,0x00,/*"l",76*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB6,0x00,0xFE,0x01,0xB6,0x01,0xB6,0x01,
0xB6,0x01,0xB6,0x01,0xB6,0x01,0xB6,0x01,0xB6,0x01,0x00,0x00,/*"m",77*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x00,0xFE,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,0x00,0x00,/*"n",78*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"o",79*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x00,0xFE,0x00,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFE,0x00,0x76,0x00,0x06,0x00,/*"p",80*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0x01,0xFC,0x01,0xCE,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x80,0x01,/*"q",81*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF6,0x01,0xFE,0x01,0x1E,0x00,0x0E,0x00,
0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,/*"r",82*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x00,0x86,0x01,0x0E,0x00,
0xFC,0x00,0xC0,0x01,0x86,0x01,0xFC,0x00,0x78,0x00,0x00,0x00,/*"s",83*/
0x00,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFC,0x00,0xFC,0x00,0x18,0x00,0x18,0x00,
0x18,0x00,0x18,0x00,0x18,0x00,0xF8,0x00,0xF0,0x00,0x00,0x00,/*"t",84*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x00,0x00,/*"u",85*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCC,0x00,0x78,0x00,0x30,0x00,0x00,0x00,/*"v",86*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0xB6,0x01,
0xB6,0x01,0xFE,0x01,0xFE,0x01,0xCE,0x01,0x84,0x00,0x00,0x00,/*"w",87*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0xCE,0x01,0xFC,0x00,0x78,0x00,
0x30,0x00,0x78,0x00,0xFC,0x00,0xCE,0x01,0x86,0x01,0x00,0x00,/*"x",88*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x01,0x86,0x01,0x86,0x01,0x86,0x01,
0x86,0x01,0x86,0x01,0xCE,0x01,0xFC,0x01,0xB8,0x01,0x80,0x01,/*"y",89*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x01,0xFE,0x01,0xC0,0x00,0x60,0x00,
0x30,0x00,0x18,0x00,0x0C,0x00,0xFE,0x01,0xFE,0x01,0x00,0x00,/*"z",90*/
0x00,0x00,0xE0,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
0x0C,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,/*"{",91*/
0x00,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,/*"|",92*/
0x00,0x00,0x1C,0x00,0x30,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0xC0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,/*"}",93*/
0x1C,0x01,0xB6,0x01,0xE2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 /*"~",94*/
};


uint8_t ADDR_CHAR_24[4560]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,
0x70,0x00,0x70,0x00,0x70,0x00,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"!",1*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9C,0x03,0x9C,0x03,0x9C,0x03,
0x08,0x01,0x08,0x01,0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/
0x00,0x00,0x00,0x00,0x00,0x00,0x98,0x01,0x98,0x01,0x98,0x01,0x98,0x01,0x98,0x01,
0xFE,0x07,0xFE,0x07,0x98,0x01,0x98,0x01,0xFE,0x07,0xFE,0x07,0x98,0x01,0x98,0x01,
0x98,0x01,0x98,0x01,0x98,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"#",3*/
0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0xF0,0x03,0xF8,0x03,0x0C,0x03,0x0C,0x00,
0x1C,0x00,0xF8,0x01,0xF0,0x03,0x00,0x03,0x0C,0x03,0x8C,0x03,0xFC,0x01,0xFC,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"$",4*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x22,0x00,
0x1C,0x03,0xC0,0x03,0xF8,0x00,0x1E,0x00,0xC6,0x01,0x20,0x02,0x20,0x02,0x20,0x02,
0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"%",5*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0xF0,0x03,0x18,0x00,
0x18,0x00,0x18,0x00,0x30,0x00,0x78,0x06,0xFC,0x07,0xCC,0x03,0x8C,0x01,0xFC,0x07,
0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"&",6*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0xC0,0x00,0xC0,0x00,
0xC0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xC0,0x00,
0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"(",8*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*")",9*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x6C,0x03,
0xFC,0x03,0xF0,0x00,0xF0,0x00,0xF8,0x01,0x98,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"*",10*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0xFE,0x07,0xFE,0x07,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"+",11*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x60,0x00,
0x60,0x00,0x30,0x00,0x30,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*",",12*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xFE,0x03,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",13*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*".",14*/
0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,
0xC0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x30,0x00,0x18,0x00,0x18,0x00,
0x18,0x00,0x0C,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"/",15*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0xFC,0x01,0x8C,0x01,0x06,0x03,
0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x8C,0x01,0xFC,0x01,
0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"0",16*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x7C,0x00,0x7C,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"1",17*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0xFC,0x01,0x8E,0x03,0x06,0x03,
0x06,0x03,0x80,0x03,0xC0,0x01,0xE0,0x00,0x70,0x00,0x18,0x00,0x0C,0x00,0xFE,0x03,
0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"2",18*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0xFE,0x01,0x86,0x03,0x00,0x03,
0x80,0x03,0xF0,0x01,0xF0,0x01,0x80,0x03,0x00,0x03,0x00,0x03,0x83,0x03,0xFF,0x01,
0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"3",19*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xE0,0x01,0xE0,0x01,0xB0,0x01,
0x98,0x01,0x98,0x01,0x8C,0x01,0x84,0x01,0xFE,0x03,0xFE,0x03,0x80,0x01,0xE0,0x03,
0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"4",20*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x01,0xFC,0x01,0x0C,0x00,0x0C,0x00,
0xEC,0x00,0xFC,0x01,0x8C,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x86,0x03,0xFE,0x01,
0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"5",21*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0xF8,0x03,0x3C,0x00,0x0C,0x00,
0x0E,0x00,0xF6,0x00,0xFE,0x01,0x8E,0x03,0x06,0x03,0x06,0x03,0x8C,0x03,0xFC,0x01,
0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"6",22*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0xFE,0x03,0x06,0x03,0x00,0x03,
0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"7",23*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0xFC,0x01,0x8E,0x03,0x06,0x03,
0x8E,0x03,0xFC,0x01,0xFC,0x01,0x8E,0x03,0x06,0x03,0x06,0x03,0x8E,0x03,0xFC,0x01,
0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"8",24*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xFC,0x01,0x8E,0x01,0x06,0x03,
0x06,0x03,0x8E,0x03,0xFC,0x03,0x78,0x03,0x80,0x03,0x80,0x01,0xE0,0x01,0xFE,0x00,
0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"9",25*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x70,0x00,0x70,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*":",26*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC0,0x01,0xC0,0x01,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x60,0x00,
0x30,0x00,0x30,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*";",27*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x80,0x07,
0xE0,0x01,0x70,0x00,0x1C,0x00,0x0F,0x00,0x1C,0x00,0x70,0x00,0xE0,0x01,0x80,0x07,
0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"<",28*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0x07,0xFF,0x07,0x00,0x00,0x00,0x00,0xFF,0x07,0xFF,0x07,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"=",29*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x1E,0x00,
0x78,0x00,0xE0,0x00,0x80,0x03,0x00,0x0F,0x80,0x03,0xE0,0x00,0x78,0x00,0x1E,0x00,
0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*">",30*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0xFC,0x01,0x0C,0x03,
0x0C,0x03,0x00,0x03,0xC0,0x01,0xE0,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"?",31*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x98,0x00,0x08,0x01,0x04,0x01,
0x04,0x01,0xC4,0x01,0x24,0x01,0x24,0x01,0x24,0x01,0xC4,0x01,0x04,0x00,0x08,0x00,
0x08,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"@",32*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0xFC,0x00,0xB0,0x01,
0xB0,0x01,0xB8,0x01,0x18,0x03,0x18,0x03,0xFC,0x03,0xFC,0x07,0x06,0x06,0x0F,0x0F,
0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"A",33*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0xFE,0x01,0x0C,0x03,
0x0C,0x03,0x8C,0x03,0xFC,0x01,0xFC,0x03,0x0C,0x07,0x0C,0x06,0x0C,0x06,0xFE,0x07,
0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"B",34*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x06,0xF8,0x07,0x1C,0x07,
0x0E,0x06,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x0E,0x06,0x1C,0x07,0xF8,0x03,
0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"C",35*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x01,0x86,0x03,
0x06,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x03,0xFF,0x01,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"D",36*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0xFE,0x07,0x0C,0x06,
0x0C,0x06,0xCC,0x00,0xFC,0x00,0xFC,0x00,0xCC,0x00,0x0C,0x06,0x0C,0x06,0xFE,0x07,
0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"E",37*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0xFE,0x07,0x0C,0x06,
0x0C,0x06,0xCC,0x00,0xFC,0x00,0xFC,0x00,0xCC,0x00,0x0C,0x00,0x0C,0x00,0x7E,0x00,
0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"F",38*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x06,0xFC,0x07,0x0C,0x07,
0x06,0x06,0x06,0x00,0x06,0x00,0xC6,0x0F,0xC6,0x0F,0x06,0x06,0x0C,0x06,0xFC,0x07,
0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"G",39*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x9E,0x07,0x0C,0x03,
0x0C,0x03,0x0C,0x03,0xFC,0x03,0xFC,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,
0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"H",40*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0xFC,0x03,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"I",41*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x0F,0xE0,0x0F,0x00,0x03,
0x00,0x03,0x00,0x03,0x00,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x86,0x03,0xFE,0x01,
0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"J",42*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBE,0x07,0xBE,0x07,0x8C,0x01,
0xCC,0x00,0x6C,0x00,0xFC,0x00,0xDC,0x00,0x8C,0x01,0x8C,0x01,0x0C,0x03,0x3E,0x0F,
0x3E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"K",43*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x18,0x00,
0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x06,0x18,0x06,0x18,0x06,0xFE,0x07,
0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"L",44*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0E,0x07,
0x9E,0x07,0x9E,0x07,0xF6,0x06,0xF6,0x06,0x66,0x06,0x66,0x06,0x06,0x06,0x9F,0x0F,
0x9F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"M",45*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCE,0x07,0xDE,0x07,0x1C,0x03,
0x3C,0x03,0x3C,0x03,0x6C,0x03,0x6C,0x03,0xCC,0x03,0xCC,0x03,0x8C,0x03,0xBE,0x03,
0x3E,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"N",46*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x01,0x9C,0x03,
0x0E,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0E,0x07,0x9C,0x03,0xF8,0x01,
0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"O",47*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x01,0xFE,0x03,0x0C,0x07,
0x0C,0x06,0x0C,0x06,0x0C,0x07,0xFC,0x03,0xFC,0x01,0x0C,0x00,0x0C,0x00,0x7E,0x00,
0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"P",48*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x01,0x9C,0x03,
0x0E,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0E,0x07,0x9C,0x03,0xF8,0x01,
0xF0,0x00,0xF0,0x06,0xF8,0x07,0x98,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Q",49*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x01,0xFE,0x03,0x0C,0x07,
0x0C,0x06,0x0C,0x07,0xFC,0x03,0xFC,0x01,0x8C,0x03,0x0C,0x03,0x0C,0x07,0x3E,0x0E,
0x3E,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"R",50*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x06,0xFC,0x07,0x0E,0x07,
0x06,0x06,0x0E,0x00,0xFC,0x00,0xF0,0x03,0x00,0x07,0x06,0x06,0x0E,0x07,0xFE,0x03,
0xF6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"S",51*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0xFE,0x07,0x66,0x06,
0x66,0x06,0x66,0x06,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,
0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"T",52*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x9E,0x07,0x0C,0x03,
0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9C,0x03,0xF8,0x01,
0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"U",53*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x07,0x8F,0x07,0x06,0x03,
0x8C,0x01,0x8C,0x01,0x8C,0x01,0xD8,0x00,0xD8,0x00,0xD8,0x00,0x70,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"V",54*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x0F,0x1F,0x0F,0x06,0x0C,
0xE6,0x0C,0xE6,0x0C,0xE6,0x0C,0xB6,0x0D,0xB4,0x05,0x1C,0x07,0x1C,0x07,0x1C,0x07,
0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"W",55*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0x07,0x8F,0x07,0x06,0x03,
0x8C,0x01,0xD8,0x00,0x70,0x00,0x70,0x00,0xD8,0x00,0x8C,0x01,0x06,0x03,0x8F,0x07,
0x8F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"X",56*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDE,0x07,0xDE,0x07,0x98,0x01,
0x98,0x01,0xF0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,
0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Y",57*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0xFC,0x03,0x0C,0x03,
0x8C,0x01,0xCC,0x00,0x60,0x00,0x60,0x00,0x30,0x03,0x18,0x03,0x0C,0x03,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Z",58*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0xE0,0x01,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0xE0,0x01,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"[",59*/
0x00,0x00,0x00,0x00,0x0C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x30,0x00,
0x30,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,
0x80,0x01,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"\",60*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x78,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x78,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"]",61*/
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x70,0x00,0xD8,0x00,0xD8,0x00,0x8C,0x01,
0x06,0x03,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F,0xFF,0x0F,0x00,0x00,/*"_",63*/
0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x60,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF8,0x01,0xFC,0x03,0x00,0x03,0xF8,0x03,0xFC,0x03,0x0E,0x03,0x86,0x03,0xFE,0x07,
0x7C,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"a",65*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x06,0x00,0x06,0x00,
0xF6,0x00,0xFE,0x03,0x0E,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x0E,0x03,0xFF,0x03,
0xF7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"b",66*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x06,0xFC,0x07,0x0C,0x06,0x06,0x06,0x06,0x00,0x06,0x00,0x0E,0x06,0xFC,0x07,
0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"c",67*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x06,0x00,0x06,
0xF0,0x06,0xFC,0x07,0x0C,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x0E,0x07,0xFC,0x0F,
0xF0,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"d",68*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x00,0xFC,0x03,0x0C,0x03,0xFE,0x07,0xFE,0x07,0x06,0x00,0x0C,0x06,0xFC,0x07,
0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"e",69*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0xF0,0x07,0x30,0x00,0x30,0x00,
0xFC,0x03,0xFC,0x03,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"f",70*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x0E,0xFC,0x0F,0x0C,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x07,0xFC,0x07,
0xF0,0x06,0x00,0x06,0x00,0x07,0xF8,0x03,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"g",71*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,
0xEC,0x01,0xFC,0x03,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,
0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"h",72*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,
0x7C,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"i",73*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,
0xFC,0x01,0xFC,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,
0x80,0x01,0x80,0x01,0xC0,0x01,0xFE,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"j",74*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,
0xEC,0x03,0xEC,0x03,0x6C,0x00,0x3C,0x00,0x3C,0x00,0x6C,0x00,0xCC,0x00,0xCE,0x07,
0xCE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"k",75*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"l",76*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xBF,0x03,0xFF,0x07,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0xEF,0x0E,
0xEF,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"m",77*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xEE,0x01,0xFE,0x03,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,
0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"n",78*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x00,0xFC,0x03,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0xFC,0x03,
0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"o",79*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF7,0x00,0xFF,0x03,0x0E,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x0E,0x03,0xFE,0x03,
0xF6,0x00,0x06,0x00,0x06,0x00,0x1F,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"p",80*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x0E,0xFC,0x0F,0x0C,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x07,0xFC,0x07,
0xF0,0x06,0x00,0x06,0x00,0x06,0x80,0x0F,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*"q",81*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x9E,0x03,0xDE,0x07,0x78,0x06,0x38,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFE,0x01,
0xFE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"r",82*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xF0,0x03,0xFC,0x03,0x0C,0x03,0x3C,0x00,0xF8,0x01,0xC0,0x03,0x0C,0x03,0xFC,0x03,
0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"s",83*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x18,0x00,
0xFE,0x03,0xFE,0x03,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x06,0xF8,0x07,
0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"t",84*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x8E,0x03,0x8E,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x8C,0x03,0xFC,0x07,
0x78,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"u",85*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x9F,0x07,0x9F,0x07,0x06,0x03,0x8C,0x01,0x8C,0x01,0xD8,0x00,0xD8,0x00,0x70,0x00,
0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"v",86*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x8F,0x07,0x8F,0x07,0x26,0x03,0x26,0x03,0x76,0x01,0xDC,0x01,0xDC,0x01,0x8C,0x01,
0x8C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"w",87*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x9E,0x07,0x9E,0x07,0x98,0x01,0xF0,0x00,0x60,0x00,0xF0,0x00,0x98,0x01,0x9E,0x07,
0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"x",88*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x8F,0x07,0x8F,0x07,0x06,0x03,0x8C,0x01,0x8C,0x01,0xD8,0x00,0xF8,0x00,0x70,0x00,
0x30,0x00,0x30,0x00,0x18,0x00,0x7F,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"y",89*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFC,0x03,0xFC,0x03,0x8C,0x01,0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x03,0xFC,0x03,
0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"z",90*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xE0,0x01,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x70,0x00,0x38,0x00,0x70,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0xE0,0x01,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"{",91*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"|",92*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x70,0x00,0xE0,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,
0x30,0x00,0x30,0x00,0x3C,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"}",93*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x06,0x7C,0x07,0xEE,0x03,0xC6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"~",94*/


// uint8_t ADDR_CHAR_24[4560]={
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x60,0x00,
// 0x00,0x00,0x00,0x00,0xF0,0x00,0xF0,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"!",1*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0x03,0xB8,0x03,0xB8,0x03,0xB8,0x03,
// 0xB8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x07,0x30,0x07,0x30,0x07,0x38,0x07,
// 0x38,0x03,0xFF,0x0F,0xFF,0x0F,0x18,0x03,0x98,0x03,0x98,0x03,0xFF,0x0F,0xFF,0x0F,
// 0x9C,0x01,0x9C,0x01,0x9C,0x01,0x8C,0x01,0xCC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"#",3*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0xF0,0x01,0xF8,0x03,0xFC,0x07,0x7C,0x07,
// 0x7C,0x07,0x7C,0x00,0x7C,0x00,0xF8,0x00,0xE0,0x01,0xE0,0x03,0xE0,0x07,0x6E,0x07,
// 0x6E,0x07,0x7E,0x07,0xFC,0x07,0xFC,0x03,0xF0,0x01,0x60,0x00,0x60,0x00,0x00,0x00,/*"$",4*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x06,0x3E,0x03,0x36,0x03,0x36,0x03,
// 0xB6,0x01,0xB6,0x01,0xF6,0x00,0xFE,0x00,0x7C,0x07,0xE0,0x0F,0xB0,0x0D,0xB0,0x0D,
// 0xF0,0x0D,0x98,0x0D,0x98,0x0D,0x8C,0x0F,0x0C,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*"%",5*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x01,0x9C,0x01,0x9C,0x03,
// 0x9C,0x01,0xDC,0x01,0xF8,0x00,0x78,0x00,0x7C,0x00,0x7E,0x0E,0xEE,0x0E,0xEE,0x07,
// 0xCE,0x07,0x8E,0x07,0x9E,0x0F,0xFC,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"&",6*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,
// 0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x07,0x80,0x03,0x80,0x01,0xC0,0x01,
// 0xC0,0x01,0xC0,0x00,0xC0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xC0,0x00,0xC0,0x00,
// 0xC0,0x00,0xC0,0x01,0x80,0x01,0x80,0x03,0x00,0x07,0x00,0x0E,0x00,0x00,0x00,0x00,/*"(",8*/
// 0x00,0x00,0x00,0x00,0x06,0x00,0x0E,0x00,0x1C,0x00,0x18,0x00,0x38,0x00,0x30,0x00,
// 0x70,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
// 0x70,0x00,0x30,0x00,0x38,0x00,0x18,0x00,0x1C,0x00,0x0E,0x00,0x06,0x00,0x00,0x00,/*")",9*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE6,0x0C,0xEE,0x0E,
// 0xFE,0x0F,0xF8,0x03,0xF0,0x01,0xFC,0x07,0xFE,0x0F,0xE6,0x0C,0xE0,0x00,0xE0,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"*",10*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xFF,0x0F,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"+",11*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x18,0x00,0x0C,0x00,0x00,0x00,/*",",12*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",13*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*".",14*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0C,0x00,0x06,0x00,0x06,0x00,0x03,
// 0x80,0x03,0x80,0x01,0xC0,0x01,0xC0,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x30,0x00,
// 0x18,0x00,0x1C,0x00,0x0C,0x00,0x0E,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"/",15*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x03,0xBC,0x07,0x1C,0x07,
// 0x0E,0x07,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x07,0x1C,0x07,0xBC,0x07,0xF8,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"0",16*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xE0,0x00,0xF0,0x00,0xF8,0x00,
// 0xFC,0x00,0xEC,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"1",17*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x01,0xFC,0x03,0x9C,0x07,0x0E,0x07,
// 0x0E,0x07,0x00,0x07,0x00,0x07,0x80,0x03,0x80,0x03,0xC0,0x01,0xE0,0x00,0xF0,0x00,
// 0x78,0x00,0x3C,0x00,0x1C,0x00,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"2",18*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x01,0xF8,0x03,0x1C,0x07,0x0E,0x07,
// 0x0E,0x07,0x00,0x07,0x00,0x07,0xE0,0x03,0xE0,0x03,0x80,0x07,0x00,0x07,0x00,0x0E,
// 0x0E,0x0E,0x0E,0x07,0x9C,0x07,0xF8,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"3",19*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0xC0,0x03,0xC0,0x03,
// 0xE0,0x03,0xF0,0x03,0xF0,0x03,0xB8,0x03,0x9C,0x03,0x9C,0x03,0x8E,0x03,0xFF,0x0F,
// 0xFF,0x0F,0x80,0x03,0x80,0x03,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"4",20*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x07,0x1C,0x00,0x1C,0x00,
// 0x1C,0x00,0x0C,0x00,0xFE,0x03,0xDE,0x07,0x0E,0x07,0x00,0x07,0x00,0x0E,0x00,0x0E,
// 0x07,0x07,0x0E,0x07,0x8E,0x07,0xFC,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"5",21*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0xC0,0x01,0xE0,0x00,0xE0,0x00,
// 0x70,0x00,0x38,0x00,0xF8,0x01,0xFC,0x07,0x1C,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x1C,0x07,0xF8,0x07,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"6",22*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0x00,0x0E,0x00,0x07,
// 0x00,0x07,0x80,0x03,0x80,0x03,0xC0,0x01,0xC0,0x01,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0x70,0x00,0x70,0x00,0x70,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"7",23*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xFC,0x03,0x1C,0x07,0x0E,0x07,
// 0x0E,0x07,0x0E,0x07,0x9C,0x07,0xFC,0x03,0xFC,0x03,0x9E,0x07,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x1E,0x07,0xFC,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"8",24*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xFC,0x03,0x9E,0x07,0x0E,0x07,
// 0x0E,0x0F,0x07,0x0F,0x0E,0x07,0x0E,0x07,0x9E,0x07,0xFC,0x03,0xF0,0x03,0xC0,0x01,
// 0xE0,0x01,0xE0,0x00,0x70,0x00,0x70,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"9",25*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*":",26*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x60,0x00,0x60,0x00,0x00,0x00,/*";",27*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x07,0x80,0x03,0xC0,0x01,
// 0xE0,0x00,0x70,0x00,0x38,0x00,0x1C,0x00,0x0E,0x00,0x1C,0x00,0x38,0x00,0x70,0x00,
// 0xE0,0x00,0xC0,0x01,0x80,0x03,0x00,0x07,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,/*"<",28*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F,0xFF,0x0F,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"=",29*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x0E,0x00,0x18,0x00,0x70,0x00,
// 0xE0,0x00,0xC0,0x01,0x80,0x03,0x00,0x07,0x00,0x0E,0x00,0x07,0x80,0x03,0xC0,0x01,
// 0xE0,0x00,0x70,0x00,0x18,0x00,0x0E,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*">",30*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x03,0xBC,0x07,0x1C,0x07,
// 0x0E,0x07,0x00,0x07,0x80,0x07,0xC0,0x03,0xC0,0x01,0xE0,0x00,0xE0,0x00,0x60,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"?",31*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x38,0x03,0x0C,0x06,0x0C,0x0C,
// 0xE6,0x0F,0xB6,0x0F,0xBE,0x0F,0xBB,0x0D,0x9B,0x0D,0x9B,0x0D,0xDB,0x0D,0xDE,0x07,
// 0xFE,0x07,0x06,0x00,0x0C,0x00,0x18,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"@",32*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xF0,0x00,0xF0,0x01,
// 0xF0,0x01,0xF8,0x01,0xB8,0x03,0xB8,0x03,0xB8,0x03,0x9C,0x03,0xFC,0x07,0xFC,0x07,
// 0x1E,0x07,0x0E,0x0F,0x0E,0x0E,0x0E,0x0E,0x0F,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"A",33*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0xFE,0x03,0x8E,0x07,0x0E,0x07,
// 0x0E,0x0F,0x0E,0x0F,0x0E,0x07,0xFE,0x03,0xFE,0x03,0x0E,0x07,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0F,0x8E,0x07,0xFE,0x07,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"B",34*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0xF8,0x03,0x3C,0x07,0x1C,0x0E,
// 0x1E,0x0E,0x0E,0x0E,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x0E,0x0E,0x0E,
// 0x1E,0x0E,0x1C,0x0F,0x3C,0x07,0xF8,0x03,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"C",35*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0xFE,0x01,0xCE,0x03,0x8E,0x07,
// 0x0E,0x07,0x0E,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0F,
// 0x0E,0x07,0x8E,0x07,0xCE,0x03,0xFE,0x01,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"D",36*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0xFE,0x07,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0xFE,0x07,0xFE,0x07,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0xFE,0x0F,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*"E",37*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0xFE,0x0F,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0xFE,0x03,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"F",38*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xF8,0x03,0xBC,0x07,0x1C,0x07,
// 0x1E,0x0F,0x0E,0x0E,0x0E,0x00,0x0E,0x00,0xCE,0x0F,0xCE,0x0F,0x0E,0x0E,0x0E,0x0E,
// 0x1E,0x0E,0x1C,0x0F,0x3C,0x0F,0xF8,0x0F,0xE0,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"G",39*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0xFE,0x0F,0xFE,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"H",40*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"I",41*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,
// 0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x0E,0x0F,0x0E,0x07,
// 0x0E,0x07,0x1E,0x07,0xBC,0x07,0xF8,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"J",42*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x07,0x8E,0x03,0xCE,0x03,
// 0xEE,0x01,0xEE,0x00,0x7E,0x00,0x7E,0x00,0xFE,0x00,0xFE,0x01,0xCE,0x01,0xCE,0x03,
// 0x8E,0x03,0x8E,0x07,0x0E,0x07,0x0E,0x0F,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"K",43*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0xFE,0x0F,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*"L",44*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x0F,0x1E,0x0F,0x1E,0x0F,0x9E,0x0F,
// 0xBE,0x0F,0xBE,0x0F,0xBE,0x0F,0xBE,0x0F,0xBE,0x0F,0xFE,0x0F,0xFE,0x0F,0xFE,0x0F,
// 0xFE,0x0E,0xEE,0x0E,0xEE,0x0E,0xEE,0x0E,0xEE,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"M",45*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x1E,0x0E,0x1E,0x0E,0x3E,0x0E,
// 0x3E,0x0E,0x3E,0x0E,0x7E,0x0E,0x7E,0x0E,0xEE,0x0E,0xEE,0x0E,0xCE,0x0F,0xCE,0x0F,
// 0x8E,0x0F,0x8E,0x0F,0x8E,0x0F,0x0E,0x0F,0x0E,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*"N",46*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x03,0xBC,0x07,0x1E,0x07,
// 0x0E,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0F,0x1E,0x07,0xBC,0x07,0xF8,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"O",47*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0xFE,0x03,0x8E,0x07,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0F,0xFE,0x07,0xFE,0x03,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"P",48*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x03,0xBC,0x07,0x1E,0x07,
// 0x0E,0x0F,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0xCE,0x0F,
// 0xCE,0x0F,0x9E,0x07,0xBC,0x07,0xF8,0x07,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*"Q",49*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0xFE,0x03,0x8E,0x07,0x0E,0x0F,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0F,0x8E,0x07,0xFE,0x03,0xFE,0x01,0xCE,0x01,0x8E,0x03,
// 0x8E,0x03,0x0E,0x07,0x0E,0x07,0x0E,0x0F,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"R",50*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0xF8,0x03,0x9C,0x07,0x1E,0x07,
// 0x0E,0x07,0x1E,0x00,0x3C,0x00,0xF8,0x00,0xF0,0x03,0xC0,0x07,0x00,0x0F,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0F,0x1E,0x07,0xFC,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"S",51*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0xFE,0x0F,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"T",52*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0F,0x9C,0x07,0xFC,0x07,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"U",53*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x0E,0x0F,0x0E,0x0E,0x0E,0x0E,0x0F,
// 0x1E,0x07,0x1C,0x07,0x1C,0x07,0x9C,0x03,0xBC,0x03,0xB8,0x03,0xB8,0x03,0xF8,0x01,
// 0xF0,0x01,0xF0,0x01,0xF0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"V",54*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x0E,0xE7,0x0E,0xE7,0x0E,0xF7,0x0E,
// 0xFE,0x0E,0xFE,0x0F,0xFE,0x0F,0xFE,0x0F,0xFE,0x0F,0xBE,0x07,0xBE,0x07,0xBE,0x07,
// 0xBC,0x07,0x9C,0x07,0x9C,0x07,0x9C,0x07,0x1C,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*"W",55*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x0E,0x1E,0x07,0x1C,0x07,0x9C,0x03,
// 0xB8,0x03,0xF8,0x01,0xF0,0x01,0xF0,0x00,0xE0,0x00,0xF0,0x01,0xF0,0x01,0xB8,0x03,
// 0xBC,0x03,0x1C,0x07,0x1E,0x07,0x0E,0x0F,0x0F,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"X",56*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0E,0x0E,0x0E,0x0E,0x07,0x1C,0x07,
// 0x9C,0x03,0xB8,0x03,0xF8,0x01,0xF0,0x01,0xF0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Y",57*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0xFE,0x0F,0x00,0x07,0x00,0x07,
// 0x80,0x03,0xC0,0x03,0xC0,0x01,0xE0,0x00,0xE0,0x00,0x70,0x00,0x78,0x00,0x38,0x00,
// 0x1C,0x00,0x1C,0x00,0x0E,0x00,0xFE,0x0F,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,/*"Z",58*/
// 0x00,0x00,0x00,0x00,0xE0,0x0F,0xE0,0x0F,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
// 0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,
// 0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xE0,0x0F,0xE0,0x0F,0x00,0x00,/*"[",59*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0C,0x00,0x1C,0x00,0x18,0x00,
// 0x38,0x00,0x38,0x00,0x30,0x00,0x70,0x00,0x60,0x00,0xE0,0x00,0xE0,0x00,0xC0,0x00,
// 0xC0,0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x03,0x00,0x07,0x00,0x06,0x00,0x00,/*"\",60*/
// 0x00,0x00,0x00,0x00,0xFE,0x00,0xFE,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xFE,0x00,0xFE,0x00,0x00,0x00,/*"]",61*/
// 0x00,0x00,0x00,0x00,0xF0,0x01,0xF8,0x03,0x9C,0x03,0x0E,0x06,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F,/*"_",63*/
// 0x00,0x00,0x00,0x00,0x70,0x00,0xE0,0x00,0xC0,0x01,0xC0,0x01,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x03,0xFC,0x07,0x1C,0x07,0x00,0x07,0xF0,0x07,0xFC,0x07,
// 0x1E,0x07,0x0E,0x07,0x8E,0x07,0xFC,0x07,0x78,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"a",65*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0xFE,0x03,0xFE,0x07,0x1E,0x07,0x0E,0x07,0x0E,0x0F,0x0E,0x0E,
// 0x0E,0x0F,0x0E,0x07,0x9E,0x07,0xFE,0x03,0xEE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"b",66*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x03,0xFC,0x07,0x1E,0x07,0x0E,0x07,0x0E,0x00,0x0E,0x00,
// 0x0E,0x0E,0x0E,0x0F,0x1C,0x07,0xF8,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"c",67*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,
// 0x00,0x07,0x00,0x07,0xF8,0x07,0xFC,0x07,0x1E,0x07,0x0E,0x07,0x0E,0x07,0x0E,0x07,
// 0x0E,0x07,0x0E,0x07,0x9C,0x07,0xFC,0x07,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*"d",68*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x03,0xBC,0x07,0x1C,0x07,0x0E,0x07,0xFE,0x0F,0x0E,0x00,
// 0x0E,0x00,0x0E,0x0F,0x1C,0x07,0xF8,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"e",69*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x07,0xE0,0x0F,0x70,0x0C,0x70,0x00,
// 0x70,0x00,0x70,0x00,0xFE,0x07,0xFE,0x07,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,
// 0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"f",70*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x0F,0xFC,0x03,0x9C,0x03,0x9C,0x03,0x9C,0x03,0xFC,0x03,
// 0xFC,0x01,0x0E,0x00,0xFC,0x00,0xF8,0x07,0x0E,0x0E,0x0E,0x0E,0x1E,0x07,0xFC,0x03,/*"g",71*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0xEE,0x03,0xFE,0x07,0x1E,0x07,0x1E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"h",72*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"i",73*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x80,0x03,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,
// 0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0xFC,0x01,0xFC,0x00,/*"j",74*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,
// 0x0E,0x00,0x0E,0x00,0x8E,0x07,0xCE,0x03,0xEE,0x01,0xFE,0x00,0xFE,0x00,0xFE,0x01,
// 0xDE,0x01,0x8E,0x03,0x0E,0x07,0x0E,0x07,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"k",75*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"l",76*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x7F,0x0F,0xFF,0x0F,0xEF,0x0C,0xE7,0x0C,0xE7,0x0C,0xE7,0x0C,
// 0xE7,0x0C,0xE7,0x0C,0xE7,0x0C,0xE7,0x0C,0xE7,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,/*"m",77*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xEE,0x03,0xFE,0x07,0x1E,0x07,0x1E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"n",78*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x01,0xFC,0x07,0x1E,0x07,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0E,0x0E,0x0F,0x9C,0x07,0xF8,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"o",79*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xFE,0x01,0xFE,0x07,0x1E,0x07,0x0E,0x07,0x0E,0x0F,0x0E,0x0E,
// 0x0E,0x0F,0x0E,0x07,0x9E,0x07,0xFE,0x03,0xEE,0x01,0x0E,0x00,0x0E,0x00,0x0E,0x00,/*"p",80*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x07,0xFC,0x07,0x1E,0x07,0x0E,0x07,0x0E,0x07,0x0E,0x07,
// 0x0E,0x07,0x0E,0x07,0x9C,0x07,0xFC,0x07,0xF0,0x07,0x00,0x07,0x00,0x07,0x00,0x07,/*"q",81*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x9C,0x03,0xFC,0x03,0x7C,0x00,0x3C,0x00,0x3C,0x00,0x1C,0x00,
// 0x1C,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"r",82*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xF8,0x03,0xBC,0x07,0x1C,0x07,0x1C,0x00,0xFC,0x00,0xF0,0x03,
// 0x00,0x07,0x0C,0x07,0x1C,0x07,0xFC,0x07,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/*"s",83*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,
// 0x70,0x00,0x70,0x00,0xFE,0x07,0xFE,0x07,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,
// 0x70,0x00,0x70,0x00,0x70,0x00,0xE0,0x07,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*"t",84*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,
// 0x0E,0x0F,0x0E,0x0F,0x9E,0x0F,0xFC,0x0F,0x78,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"u",85*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x07,0x1C,0x07,0x1C,0x07,0x9C,0x03,0xB8,0x03,
// 0xB8,0x01,0xF0,0x01,0xF0,0x01,0xF0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"v",86*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xE7,0x0E,0xE7,0x0E,0xF6,0x0E,0xFE,0x0E,0xFE,0x0F,0xFE,0x07,
// 0xBC,0x07,0xBC,0x07,0xBC,0x07,0x9C,0x03,0x9C,0x03,0x00,0x00,0x00,0x00,0x00,0x00,/*"w",87*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x1E,0x07,0x9C,0x03,0xB8,0x03,0xF0,0x01,0xF0,0x00,0xF0,0x00,
// 0xF0,0x01,0xF8,0x03,0x9C,0x03,0x1C,0x07,0x0E,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,/*"x",88*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x0E,0x0E,0x0E,0x07,0x1C,0x07,0x1C,0x07,0x9C,0x03,0xB8,0x03,
// 0xB8,0x01,0xF0,0x01,0xF0,0x01,0xF0,0x00,0xE0,0x00,0xE0,0x00,0x7C,0x00,0x3C,0x00,/*"y",89*/
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0xFC,0x07,0xFC,0x07,0x80,0x03,0xC0,0x01,0xE0,0x00,0xF0,0x00,
// 0x78,0x00,0x38,0x00,0x1C,0x00,0xFE,0x07,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,/*"z",90*/
// 0x00,0x00,0x00,0x00,0x80,0x07,0x80,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,
// 0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x01,0xE0,0x01,0xC0,0x01,0x80,0x01,0x80,0x01,
// 0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x03,0x80,0x07,0x00,0x00,/*"{",91*/
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,
// 0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,/*"|",92*/
// 0x00,0x00,0x00,0x00,0x1E,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,
// 0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x70,0x00,0x70,0x00,0x38,0x00,0x38,0x00,
// 0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x1E,0x00,0x00,0x00,/*"}",93*/
// 0x00,0x00,0x78,0x0C,0xFC,0x0E,0xCE,0x07,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
// 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};/*"~",94*/


/**********************************************************************************************************************/
//all the functions below about lcd drivers are added by apple
/**********************************************************************************************************************/

#define Bank1_LCD_D    ((uint32_t)0x60020000)//Disp Data ADDR can not be modified!!!6
#define Bank1_LCD_C    ((uint32_t)0x60000000)//Disp Reg ADDR  can not be modified!!!6

//lcd parameters
typedef struct
{
    uint16_t  width;	//! LCD 宽度
	uint16_t  height;	//! LCD 高度
	uint16_t  id;		//! LCD ID
	uint16_t  dir;		//! 0：横屏  1：竖屏	
	uint16_t  wramcmd;	//! 开始写gram指令
	uint16_t  setxcmd;	//! 设置x坐标指令
	uint16_t  setycmd;	//! 设置y坐标指令 
}LCD_TypeDef;

LCD_TypeDef lcdtft;     //! lcd参数结构体变量   

/************************************************
func: delayms 
note: delaysInit() must be called before the first call to this function!
************************************************/
void delayms(uint16_t ms)
{
   while(ms--)  delay_01us(10000);
}


/************************************************
func: lcdReset: reset the lcd 
note: low level effective
************************************************/
void lcdReset(void)
{		
    GPIO_ResetBits(LCD_GPIO_REG_RST, LCD_GPIO_PIN_RST);
    delayms(5);					   
    GPIO_SetBits(LCD_GPIO_REG_RST, LCD_GPIO_PIN_RST );		 	 
    delayms(5);	
}



/****************************************************************
  * @brief  backLightEnable
  
  * @param  state: light of the backlight 0 -- 100
  * @param  ms:    delay time
****************************************************************/
void backLightEnable(uint8_t state, uint16_t ms)
{
	delayms(ms);
	uint8_t temp = state;
	if(temp >100)      temp = 100;
	else if(temp <= 0) temp = 0;
		        
	BACKLIGHT_TIMER->CCR4 = temp; 		
}


/************************************************
gui   name: lcdSleep
      func: 若长时间没有操作操作杆则屏幕变暗
************************************************/
void lcdSleep(void)
{
  
}




/************************************************
func: 写入要写的寄存器序号
************************************************/
static void writeCmd(uint16_t cmd)
{			
  *(__IO uint16_t *) (Bank1_LCD_C) = cmd;
}


/************************************************
func: 向液晶屏总线写入16位数据 
************************************************/
static void writeData(uint16_t data)
{			
  *(__IO uint16_t *) (Bank1_LCD_D) = data;
}


/******************************************
func : 向指定寄存器写入命令或数据
cmd  : 要寻址的寄存器地址
data : 写入的数据
******************************************/
static void lcdWriteReg(uint16_t cmd, uint16_t data)
{
  writeCmd(cmd);	
  writeData(data);
}



/************************************************
func: 初始化lcddev的参数
dir : 液晶屏方向 1：横屏 0：竖屏
************************************************/
static void lcdSetParameter(uint16_t dir)
{
	lcdtft.setxcmd = 0x2A;
	lcdtft.setycmd = 0x2B;
	lcdtft.wramcmd = 0x2C;
	
	if(dir == 1)
	{
		lcdtft.width  = 480;
		lcdtft.height = 320;
		lcdWriteReg(0x36, (1<<3)|(1<<7)|(1<<5));
	}
	else if(dir == 0)
	{
		lcdtft.width  = 320;
		lcdtft.height = 480;
		lcdWriteReg(0x36, (1<<3)|(1<<6)|(1<<7));
	}
	else
	{
		
	}
}



static void setWindow(uint16_t xstart, uint16_t ystart, uint16_t xend, uint16_t yend) 
{
	writeCmd(lcdtft.setxcmd);   
	writeData(xstart >> 8);
	writeData(xstart & 0xff);
	writeData(xend >> 8);
	writeData(xend & 0xff);

	writeCmd(lcdtft.setycmd);   
	writeData(ystart >> 8);
	writeData(ystart & 0xff);
	writeData(yend >> 8);
	writeData(yend & 0xff);
	
	writeCmd(lcdtft.wramcmd);
}


/*************************************************
  func  : 在指定区域内填充颜色
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xend  : 结束点x坐标
  yend  : 结束点y坐标
  color : 区域颜色
*************************************************/
static void lcdFill(uint16_t xstart, uint16_t ystart, uint16_t xend, uint16_t yend, uint16_t color)
{
   	uint32_t i;				
	uint16_t width  = xend - xstart + 1;  //! 得到填充宽度
	uint16_t height = yend - ystart + 1;  //! 得到填充高度
	uint32_t totalpoint = height*width;   //! 得到填充点数
	
    setWindow(xstart, ystart, xend, yend);

	for(i=0; i<totalpoint; i++)
	{
		writeData(color);
	}

	setWindow(0,0,lcdtft.width-1, lcdtft.height-1); //! 恢复窗口设置为全屏
}


/*************************************************
  func  : 在指定区域内填充颜色
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xdiff : x轴长度
  ydiff : y轴长度
  color : 区域颜色
*************************************************/
static void lcdFillDiff(uint16_t xstart, uint16_t ystart, int16_t xdiff, int16_t ydiff, uint16_t color)
{
   	uint32_t i;	

	uint32_t totalpoint = (abs(xdiff)+1)*(abs(ydiff)+1);      //! 得到填充点数
	if((xdiff<=0) && (ydiff>0))
	{
		setWindow(xstart+xdiff, ystart, xstart, ystart+ydiff);//! xstart-1
	}
	else if((xdiff<=0) && (ydiff<=0))
	{
		setWindow(xstart+xdiff, ystart+ydiff, xstart, ystart);//! xstart-1
	}
	else if((xdiff>0) && (ydiff<=0))
	{
        setWindow(xstart, ystart+ydiff, xstart+xdiff, ystart);//! xstart+xdiff-1		
	}
	else
	{
		setWindow(xstart, ystart, xstart+xdiff, ystart+ydiff);
	}

	for(i=0; i<totalpoint; i++)
	{
		writeData(color);
	}	
	setWindow(0,0,lcdtft.width-1, lcdtft.height-1);  //! 恢复窗口设置为全屏
}



/************************************************
func: 按照color颜色清屏
************************************************/
static void lcdClear(uint16_t color)
{
    uint32_t i;

	setWindow(0, 0, lcdtft.width-1, lcdtft.height-1);	
	
	for (i = 0; i < lcdtft.width*lcdtft.height; i++)
	{
		writeData(color);
	}
}



/************************************************
func: lcd_SetCursor 指定屏幕上一点作为数据的起始点
************************************************/
void lcd_SetCursor(uint16_t x, uint16_t y)
{
	writeCmd(lcdtft.setxcmd);	
	writeData(x>>8);
	writeData(0x00FF&x);		
	writeData((x)>>8);//x+1
	writeData((x));   //x+1
	
	writeCmd(lcdtft.setycmd);	
	writeData(y>>8);
	writeData(0x00FF&y);		
	writeData((y)>>8); //! y+1
	writeData((y));    //! y+1
    writeCmd(lcdtft.wramcmd);	
}



/************************************************
func : 向指定位置按指定颜色写入一个像素点数据
x, y : 光标位置
color：指定颜色
************************************************/
static void lcdDrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
    lcd_SetCursor(x, y);
	writeData(color);
}



/************************************************
func: 竖直滚屏
************************************************/
void lcdScrolScreen(uint16_t line)
{
	 lcdWriteReg(0x006a, line);   //! set scrolling line	
	 lcdWriteReg(0x0061, 0x0003); //! enable scrol
}


/*************************************************
func: 禁止竖直滚屏
*************************************************/
void lcdScrolDisable(void)
{
	 lcdWriteReg(0x006a, 0);      //! set scrolling line	
	 lcdWriteReg(0x0061, 0x0001); //! disable scrol
}



static void lcdGpioConfig(void)
{
	
  GPIO_InitTypeDef GPIO_InitStructure;
/******** backlight control pin config **********/
  GPIO_InitStructure.GPIO_Pin   = BACKLIGHT_GPIO_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(BACKLIGHT_GPIO, &GPIO_InitStructure);
  GPIO_PinAFConfig(BACKLIGHT_GPIO, BACKLIGHT_GPIO_PinSource, BACKLIGHT_GPIO_AF);

  BACKLIGHT_TIMER->ARR = 100;
  BACKLIGHT_TIMER->PSC = (PERI1_FREQUENCY * TIMER_MULT_APB1) / 50000 - 1;  //! 20us * 100 = 2ms => 500Hz
  BACKLIGHT_TIMER->CCMR2 = TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2; //! PWM
  BACKLIGHT_TIMER->CCER = TIM_CCER_CC4E;
  BACKLIGHT_TIMER->CCR4 = 0;
  BACKLIGHT_TIMER->EGR = 0;
  BACKLIGHT_TIMER->CR1 = TIM_CR1_CEN;            //! Counter enable              	

/******** lcd reset pins config******************/ 
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL; 
  GPIO_InitStructure.GPIO_Pin   = LCD_GPIO_PIN_RST;
  GPIO_Init(LCD_GPIO_REG_RST, &GPIO_InitStructure);

/******** fsmc pins config **********************/ 
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D0, LCD_GPIO_PinSource_D0, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D1, LCD_GPIO_PinSource_D1, LCD_GPIO_FSMC_AF); 
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D2, LCD_GPIO_PinSource_D2, LCD_GPIO_FSMC_AF);  
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D3, LCD_GPIO_PinSource_D3, LCD_GPIO_FSMC_AF);  
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D4, LCD_GPIO_PinSource_D4, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D5, LCD_GPIO_PinSource_D5, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D6, LCD_GPIO_PinSource_D6, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D7, LCD_GPIO_PinSource_D7, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D8, LCD_GPIO_PinSource_D8, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D9, LCD_GPIO_PinSource_D9, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D10, LCD_GPIO_PinSource_D10, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D11, LCD_GPIO_PinSource_D11, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D12, LCD_GPIO_PinSource_D12, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D13, LCD_GPIO_PinSource_D13, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D14, LCD_GPIO_PinSource_D14, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_D15, LCD_GPIO_PinSource_D15, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_RD, LCD_GPIO_PinSource_RD, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_WR, LCD_GPIO_PinSource_WR, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_CS, LCD_GPIO_PinSource_CS, LCD_GPIO_FSMC_AF);
  GPIO_PinAFConfig(LCD_GPIO_REG_FSMC_RS, LCD_GPIO_PinSource_RS, LCD_GPIO_FSMC_AF);

  
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  
  GPIO_InitStructure.GPIO_Pin = LCD_GPIOD_PINS;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = LCD_GPIOE_PINS;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
  
  GPIO_SetBits(LCD_GPIO_REG_FSMC_RD, LCD_GPIO_PIN_FSMC_RD); //! RD=1
  GPIO_SetBits(LCD_GPIO_REG_FSMC_WR, LCD_GPIO_PIN_FSMC_WR); //! WR=1  
  GPIO_SetBits(LCD_GPIO_REG_FSMC_CS, LCD_GPIO_PIN_FSMC_CS); //! CS=1
  GPIO_SetBits(LCD_GPIO_REG_FSMC_RS, LCD_GPIO_PIN_FSMC_RS); //! RS=1   
}


static void lcdFsmcConfig(void)
{  
    FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    FSMC_NORSRAMTimingInitTypeDef  p; 
    
    p.FSMC_AddressSetupTime = 0x02;	 //! 地址建立时间 0X02
    p.FSMC_AddressHoldTime  = 0x00;	 //! 地址保持时间
    p.FSMC_DataSetupTime    = 0x05;  //! 数据建立时间 0X05
    p.FSMC_BusTurnAroundDuration = 0x00; //! 总线反转时间
    p.FSMC_CLKDivision = 0x00;           //! 时钟分频
    p.FSMC_DataLatency = 0x00;           //! 数据保持时间

    p.FSMC_AccessMode = FSMC_AccessMode_B;	//! FSMC访问模式
    
    FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;                               //! 选择设置的BANK及片选信号(BANK1中的第一个BLOCK)
    FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;             //! 设置是否数据总线时分复用
    FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;                         //! 设置存储器类型
    FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;               //! 设置数据宽度
    FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;           //! 设置是否使用迸发访问模式(连续读写模式)
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;         //! 设置WAIT信号的有效电平
    FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;                         //! 设置是否使用还回模式
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState; //! 设置WAIT信号有效时机(在WAIT状态之前)
    FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;              //! 设置是否使能读写操作
    FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;                     //! 设置是否使用WAIT信号(no)
    FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Enable;                  //! 设置是否使用扩展模式(读写时序互相独立)(no)
    FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;                     //! 设置是否使用异步等待信号
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;                               //! 设置读写时序
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;                                   //! 设置写时序

    
    FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
    
    //! Enable FSMC Bank1_SRAM Bank 
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);  	
}


void lcdInit(void)
{
   lcdGpioConfig();
   lcdFsmcConfig();
   lcdSetParameter(1);///! 横屏
   delayms(2);
   lcdReset();
   
/************* Start Initial Sequence **********/
   writeCmd(0x0011);
   delayms(2);
   writeCmd(0x00D0);    
   writeData(0x0007); 
   writeData(0x0041); 
   writeData(0x001C); 
 
   writeCmd(0x00D1);    
   writeData(0x0000); 
   writeData(0x0036);   //!  30 vcm
   writeData(0x001B);   //!  15 vdv

                                                                 
   writeCmd(0x00D2);
   writeData(0x0001);   //!  AP0[2:0]
   writeData(0x0011);   //!  DC10[2:0],DC00[2:0]
  
   writeCmd(0x00C0);    
   writeData(0x0010);   //!  REV & SM & GS
   writeData(0x003B);   //!  NL[5:0]
   writeData(0x0000);   //!  SCN[6:0]
   writeData(0x0012);   //!  02  NDL , PTS[2:0]
   writeData(0x0001);   //!  11 PTG , ISC[3:0]  
  
   writeCmd(0x00C5);    
   writeData(0x0003);


   writeCmd(0x00C8);
   writeData(0x0000);
   writeData(0x0057);
   writeData(0x0033);
   writeData(0x0000);
   writeData(0x0000);
   writeData(0x0000);
   writeData(0x0044);
   writeData(0x0002);
   writeData(0x0077);
   writeData(0x0000);
   writeData(0x0000);
   writeData(0x0000);
 
  
   writeCmd(0x00F8);
   writeData(0x0001);
  
   writeCmd(0x00FE);
   writeData(0x0000);
   writeData(0x0002);
  
   writeCmd(0x0036);   //!  Set_address_mode
   writeData(0x000A);   //!  Bit3: RGB/BGR
   delayms(2);
   writeCmd(0x003a);   //!  Set_address_mode
   writeData(0x0055);   //!  05---16BIT,06---18BIT  
   delayms(2);  
   writeCmd(0x0029);  
   delayms(2);
   writeCmd(0x36);     //!  Set_address_mode
   writeData(0x68);     //!  横屏，从左下角开始，左到右， 上到下
   
}



/************************************************
    name: lcd_DrawPoint 
    func: 描绘一个点
************************************************/
void lcd_DrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
	lcdDrawPoint(x, y, color);
}



/*************************************************
    name: lcd_DrawLine 
    func: 按指定颜色画线(相对坐标)
  xstart: 起始点x坐标
  ystart: 起始点y坐标
    xend: 结束点x坐标
    yend: 结束点y坐标
   color: 曲线颜色
*************************************************/
void lcd_DrawLine(uint16_t xstart, uint16_t ystart, uint16_t xend, uint16_t yend, uint16_t color)
{
    uint16_t t; 
	int xerr = 0, yerr = 0, delta_x, delta_y, distance; 
	int incx, incy, uRow, uCol; 

	delta_x = xend - xstart; 
	delta_y = yend - ystart; 
	uRow = xstart; 
	uCol = ystart; 
	
	if(delta_x > 0) incx = 1; 
	else if(delta_x == 0)incx = 0;
	else  
	{incx = -1; delta_x = -delta_x;} 

	if(delta_y > 0) incy = 1; 
	else if(delta_y == 0)incy = 0;
	else
	{incy = -1; delta_y = -delta_y;}

	if(delta_x > delta_y) distance = delta_x; 
	else distance = delta_y; 
	
	for(t = 0; t <= distance + 1; t++ ) //! 画线输出
	{  
		lcdDrawPoint(uRow, uCol, color);
		xerr += delta_x ; 
		yerr += delta_y ; 
		if(xerr > distance) 
		{ 
			xerr -= distance; 
			uRow += incx; 
		} 
		if(yerr > distance) 
		{ 
			yerr -= distance; 
			uCol += incy; 
		} 
	}  
}


/*************************************************
    name: lcd_DrawLineDiff 
    func: 按指定颜色画线(绝对坐标)
  xstart: 起始点x坐标
  ystart: 起始点y坐标
   xdiff: x轴长度
   ydiff: y轴长度
   color: 曲线颜色
*************************************************/
void lcd_DrawLineDiff(uint16_t xstart, uint16_t ystart, int16_t xdiff, int16_t ydiff, uint16_t color)
{
    uint16_t t; 
	int xerr = 0, yerr = 0, distance; 
	int incx, incy, uRow, uCol; 
 
	uRow = xstart; 
	uCol = ystart; 
	
	if(xdiff > 0) incx = 1; 
	else if(xdiff == 0)incx = 0;
	else  
	{incx = -1; xdiff = -xdiff;} 

	if(ydiff > 0) incy = 1; 
	else if(ydiff == 0)incy = 0;
	else
	{incy = -1; ydiff = -ydiff;}

	if(xdiff > ydiff) distance = xdiff; 
	else distance = ydiff; 
	
	for(t = 0; t <= distance + 1; t++ ) //! 画线输出
	{  
		lcdDrawPoint(uRow, uCol, color);
		xerr += xdiff ; 
		yerr += ydiff ; 
		if(xerr > distance) 
		{ 
			xerr -= distance; 
			uRow += incx; 
		} 
		if(yerr > distance) 
		{ 
			yerr -= distance; 
			uCol += incy; 
		} 
	}  
}




/************************************************
    name: lcd_DrawRectangle 
    func: 按指定颜色画矩形，非填充
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xend  : 结束点x坐标
  yend  : 结束点y坐标
  color : 边框的颜色
************************************************/
void lcd_DrawRectangle(uint16_t xstart, uint16_t ystart, uint16_t xend, uint16_t yend, uint16_t color)
{
	lcd_DrawLine(xstart, ystart,   xend, ystart, color);//! 上横
	lcd_DrawLine(xstart, ystart, xstart,   yend, color);//! 左竖
	lcd_DrawLine(xstart,   yend,   xend,   yend, color);//! 下横
	lcd_DrawLine(  xend, ystart,   xend,   yend, color);//! 右竖
}



/************************************************
lcd func: 按指定颜色画矩形，非填充
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xdiff : x轴长度
  ydiff : y轴长度
  color : 边框的颜色
************************************************/
void lcd_DrawRectangleDiff(uint16_t xstart, uint16_t ystart, int16_t xdiff, int16_t ydiff, uint16_t color)
{
	lcd_DrawLine(xstart, ystart, xstart+xdiff, ystart, color);//! 上横
	lcd_DrawLine(xstart, ystart, xstart, ystart+ydiff, color);//! 左竖
	lcd_DrawLine(xstart, ystart+ydiff, xstart+xdiff, ystart+ydiff, color);//! 下横
	lcd_DrawLine(xstart+xdiff, ystart, xstart+xdiff, ystart+ydiff, color);//! 右竖	
}



/************************************************
lcd func: 按指定颜色画矩形，填充
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xend  : 结束点x坐标
  yend  : 结束点y坐标
  color : 矩形的颜色
************************************************/
void lcd_DrawFillRectangle(uint16_t xstart, uint16_t ystart, uint16_t xend, uint16_t yend, uint16_t color)
{
	lcdFill(xstart, ystart, xend, yend, color);
}



/************************************************
lcd func: 按指定颜色画矩形，填充
  xstart: 起始点x坐标
  ystart: 起始点y坐标
  xdirr : x轴长度
  ydirr : y轴长度
  color : 矩形的颜色
************************************************/
void lcd_DrawFillRectangleDiff(uint16_t xstart, uint16_t ystart, int16_t xdiff, int16_t ydiff, uint16_t color)
{
	lcdFillDiff(xstart, ystart, xdiff, ydiff, color);
}


/************************************************
lcd func: 根据圆心坐标及半径画圆
      xc: 圆心的x坐标
      yc: 圆心的y坐标
       r: 圆的半径
  color : 圆周的颜色
************************************************/
void lcd_DrawCicle(uint16_t xc, uint16_t yc, uint8_t r, uint16_t color)
{
	int a = 0;
	int b = r;
	int d = 3-(r<<1);   
	while(a <= b)
	{
		lcd_DrawPoint(xc-b, yc-a, color);             //! 3           
		lcd_DrawPoint(xc+b, yc-a, color);             //! 0           
		lcd_DrawPoint(xc-a, yc+b, color);             //! 1       
		lcd_DrawPoint(xc-b, yc-a, color);             //! 7           
		lcd_DrawPoint(xc-a, yc-b, color);             //! 2             
		lcd_DrawPoint(xc+b, yc+a, color);             //! 4               
		lcd_DrawPoint(xc+a, yc-b, color);             //! 5
		lcd_DrawPoint(xc+a, yc+b, color);             //! 6 
		lcd_DrawPoint(xc-b, yc+a, color); 
		a++;
		//! 使用Bresenham算法画圆
		if(d<0) d += 4*a + 6;
		else
		{
			d += 10 + 4*(a-b);
			b--;
		}
		lcd_DrawPoint(xc+a, yc+b, color);
	}
}



/************************************************
lcd func: 根据圆心坐标及半径画实心圆
      xc: 圆心的x坐标
      yc: 圆心的y坐标
       r: 圆的半径
  color : 圆周的颜色
************************************************/
void lcd_DrawFillCicle(uint16_t xc, uint16_t yc, uint8_t r, uint16_t color)
{
	for(uint8_t i=1; i<=r; i++)
	{
	   lcd_DrawCicle(xc, yc, i, color);		
	}
}




/************************************************
lcd func: 按照color颜色清屏
************************************************/
void lcd_ClearScreen(uint16_t color)
{
	lcdClear(color);
}


/************************************************
lcd func: 显示单个英文字符  18&24 字体存放在stm32的flash里
   (x,y): 字符位置起始坐标
   color: 画笔颜色
     num: 要显示的字符
	size: 字体大小
************************************************/
void lcd_ShowChar(uint16_t x, uint16_t y, uint16_t color, uint8_t size, unsigned char c)
{
	uint32_t  temp;
    uint8_t  pos, t; 
	c = c - ' ';
	
	if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return; 
	setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 

	if(size == 18)
	{
		uint8_t buffer[28]={0};
		for(uint8_t i=0; i<28; i++)
		{
			buffer[i] = ADDR_CHAR_18[c*28+i];
		}
		setWindow(x, y, x+10, y+14); //! 设置字体外框大小 
		for(pos=0; pos<14; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 + 1]<<8; //! 每个字符由28个字节组成，偏移地址为28
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<10; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, BACKCOLOR);
		       }
		       temp >>= 1; 
	        }
		}				
	}	
    else if(size == 24)
	{
		uint8_t buffer[48]={0};
		for(uint8_t i=0; i<48; i++)
		{
			buffer[i] = ADDR_CHAR_24[c*48+i];
		}
		// spiFlashRead(buffer, F_ADDR_CHAR_24+c*48, 48);
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 + 1]<<8; //! 每个字符由48个字节组成，偏移地址为48
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, BACKCOLOR);
		       }
		       temp >>= 1; 
	        }
		}
		
	}
	else if(size == 32)
	{
		uint8_t buffer[64]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_32+c*64, 64);
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 +1]<<8; //! 每个字符由64个字节组成，偏移地址为64
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, BACKCOLOR);
		       }
		       temp >>= 1; 
	        }
		}		
		
	}
	else if(size == 36)
	{
		uint8_t buffer[108]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_36+c*108, 108);
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
	        temp = buffer[pos*3 + 2]<<16; //! 每个字符由108个字节组成，每行由三个字节组成
	        temp = temp | buffer[pos*3 + 1]<<8; 
	        temp = temp | buffer[pos*3];
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, BACKCOLOR);
		       }
		       temp >>= 1; 
	        }
		}		
		
	}
	else //! 42号字体
	{
		uint8_t buffer[126]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_42+c*126, 126);
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
	        temp = buffer[pos*3 + 2]<<16; //! 每个字符由126个字节组成，每行由三个字节组成
	        temp = temp | buffer[pos*3 + 1]<<8; 
	        temp = temp | buffer[pos*3];
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, BACKCOLOR);
		       }
		       temp >>= 1; 
	        }
		}				
	}	
	setWindow(0,0,lcdtft.width-1,lcdtft.height-1); //! 恢复窗口设置为全屏  	   	 	  
}


/************************************************
lcd func: 显示单个英文字符
   (x,y): 字符位置起始坐标
   color: 画笔颜色
     num: 要显示的字符
	size: 字体大小
************************************************/
void lcd_ShowCharBackColor(uint16_t x, uint16_t y, uint16_t color, uint8_t size, unsigned char c, uint16_t backcolor)
{
	uint32_t  temp;
    uint8_t  pos, t; 
	c = c - ' ';
	
	if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return; 
	//setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 
	
	if(size == 18)
	{
		uint8_t buffer[28]={0};
		for(uint8_t i=0; i<28; i++)
		{
			buffer[i] = ADDR_CHAR_18[c*28+i];
		}
		setWindow(x, y, x+10, y+14); //! 设置字体外框大小 
		for(pos=0; pos<14; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 + 1]<<8; //! 每个字符由28个字节组成，偏移地址为28
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<10; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, backcolor);
		       }
		       temp >>= 1; 
	        }
		}				
	}
    else if(size == 24)
	{
		uint8_t buffer[48]={0};
		for(uint8_t i=0; i<48; i++)
		{
			buffer[i] = ADDR_CHAR_24[c*48+i];
		}
		// spiFlashRead(buffer, F_ADDR_CHAR_24+c*48, 48);
		setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 + 1]<<8; //! 每个字符由48个字节组成，偏移地址为48
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, backcolor);
		       }
		       temp >>= 1; 
	        }
		}		
	}
	else if(size == 32)
	{
		uint8_t buffer[64]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_32+c*64, 64);
		setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
			temp = buffer[pos*2 +1]<<8; //! 每个字符由64个字节组成，偏移地址为64
			temp = temp | buffer[pos*2];	
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, backcolor);
		       }
		       temp >>= 1; 
	        }
		}		
		
	}
	else if(size == 36)
	{
		uint8_t buffer[108]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_36+c*108, 108);
		setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
	        temp = buffer[pos*3 + 2]<<16; //! 每个字符由108个字节组成，每行由三个字节组成
	        temp = temp | buffer[pos*3 + 1]<<8; 
	        temp = temp | buffer[pos*3];
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, backcolor);
		       }
		       temp >>= 1; 
	        }
		}		
		
	}
	else //! 42号字体
	{
		uint8_t buffer[126]={0};
		spiFlashRead(buffer, F_ADDR_CHAR_42+c*126, 126);
		setWindow(x, y, x+size/2-1, y+size-1); //! 设置字体外框大小 高度=size 宽度=size/2 
		for(pos=0; pos<size; pos++) //! 高度，即行数
		{
	        temp = buffer[pos*3 + 2]<<16; //! 每个字符由126个字节组成，每行由三个字节组成
	        temp = temp | buffer[pos*3 + 1]<<8; 
	        temp = temp | buffer[pos*3];
			
		    for(t=0; t<size/2; t++)
	        {               
		       if(temp&0x01)
		       {
			      lcd_DrawPoint(x+t, y+pos, color);	
		       }  
		       else
		       {
			      lcd_DrawPoint(x+t, y+pos, backcolor);
		       }
		       temp >>= 1; 
	        }
		}				
	}	
	setWindow(0,0,lcdtft.width-1,lcdtft.height-1); //! 恢复窗口设置为全屏  	   	 	  
}




/************************************************
lcd func: 显示字符串
   (x,y): 字符位置起始坐标
   color: 画笔颜色
	size: 字体大小
	   p: 字符串起始地址
************************************************/
void lcd_ShowString(uint16_t x, uint16_t y, uint16_t color, uint8_t size, const unsigned char *p)
{         
    while((*p<='~')&&(*p>=' ')) //! 判断是不是非法字符
    {  
		if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return;    
		
        lcd_ShowChar(x, y, color, size, *p);
        x+=size/2;
        p++;
    }  
} 


/************************************************
lcd func: 显示字符串
   (x,y): 字符位置起始坐标
   color: 画笔颜色
	size: 字体大小
	   p: 字符串起始地址
************************************************/
void lcd_ShowStringBackcolor(uint16_t x, uint16_t y, uint16_t color, uint8_t size, const unsigned char *p, uint16_t backcolor)
{         
    while((*p<='~')&&(*p>=' ')) //! 判断是不是非法字符
    {  
		if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return;    
		
        lcd_ShowCharBackColor(x, y, color, size, *p, backcolor);
        x+=size/2;
        p++;
    }  
}


/************************************************
    func: 求m的n次方
************************************************/
static uint32_t mypow(uint8_t m, uint8_t n)
{
	uint32_t result = 1;	 
	while(n--) result *= m;    
	return result;
}



/************************************************
lcd func: 显示单个数字变量值，
   (x,y): 字符位置起始坐标
   color: 画笔颜色
	size: 字体大小
     len: 指定显示数字的位数
	 num: 数值
	flag: 高位的0   1:显示 0：不显示
************************************************/
void lcd_ShowNum(uint16_t x, uint16_t y, uint16_t color, uint8_t size, uint8_t len, int32_t num, uint8_t flag)
{         	
	uint8_t t, temp;
	uint8_t enshow = 0;	

    if(num < 0)
	{	   
	   lcd_ShowChar(x, y, color, size, '-'); 
	   num = -num;		
	   for(t=1; t<len; t++)
	   {
		   temp = (num/mypow(10,len-t-1))%10;
		   if(enshow==0 && t<(len-1))
		   {
			   if(temp == 0)
			   {
				   if(flag)lcd_ShowChar(x+(size/2)*t, y, color, size, '0'); //! 高位的0 显示
				   else    lcd_ShowChar(x+(size/2)*t, y, color, size, ' '); //! 高位的0 不显示
				   continue;
			   }
			   else enshow = 1; 	 	 
		   }
	 	   lcd_ShowChar(x+(size/2)*t, y, color, size, temp+'0'); 
	   }
	}
	else
	{
	   for(t=0; t<len; t++)
	   {
		   temp = (num/mypow(10,len-t-1))%10;
		   if(enshow==0 && t<(len-1))
		   {
			   if(temp == 0)
			   {
				   if(flag)lcd_ShowChar(x+(size/2)*t, y, color, size, '0'); //! 高位的0 显示
				   else    lcd_ShowChar(x+(size/2)*t, y, color, size, ' '); //! 高位的0 不显示
				   continue;
			   }
			   else enshow = 1; 	 	 
		   }
	 	   lcd_ShowChar(x+(size/2)*t, y, color, size, temp+'0'); 
	   }
	}	
} 



/************************************************
lcd func: 显示单个数字变量值，
   (x,y): 字符位置起始坐标
   color: 画笔颜色
	size: 字体大小
     len: 指定显示数字的位数
	 num: 数值
	flag: 高位的0   1:显示 0：不显示
************************************************/
void lcd_ShowNumBackColor(uint16_t x, uint16_t y, uint16_t color, uint8_t size, uint8_t len, int32_t num, uint8_t flag, uint16_t backcolor)
{         	
	uint8_t t, temp;
	uint8_t enshow = 0;	

    if(num < 0)
	{		
	   lcd_ShowCharBackColor(x, y, color, size, '-', backcolor); 
	   num = -num;		
	   for(t=1; t<len; t++)
	   {
		   temp = (num/mypow(10,len-t-1))%10;
		   if(enshow==0 && t<(len-1))
		   {
			   if(temp == 0)
			   {
				   if(flag)lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, '0', backcolor); //! 高位的0 显示
				   else    lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, ' ', backcolor); //! 高位的0 不显示
				   continue;
			   }
			   else enshow = 1; 	 	 
		   }
	 	   lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, temp+'0', backcolor); 
	   }
	}
	else
	{
	   for(t=0; t<len; t++)
	   {
		   temp = (num/mypow(10,len-t-1))%10;
		   if(enshow==0 && t<(len-1))
		   {
			   if(temp == 0)
			   {
				   if(flag)lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, '0', backcolor); //! 高位的0 显示
				   else    lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, ' ', backcolor); //! 高位的0 不显示
				   continue;
			   }
			   else enshow = 1; 	 	 
		   }
	 	   lcd_ShowCharBackColor(x+(size/2)*t, y, color, size, temp+'0', backcolor); 
	   }
	}	
}




/************************************************
lcd func: 保留一位小数位的float型数据显示，
   (x,y): 字符位置起始坐标
   color: 画笔颜色
	size: 字体大小
     len: 指定显示数字的位数(必须大于等于4,包含符号位例：-123.4 为6位)
	 num: 数值
************************************************/
void lcd_ShowFloat(uint16_t x, uint16_t y, uint16_t color, uint8_t size, uint8_t len, float num)
{ 
    int32_t number = num*10;
	uint8_t str[len-1] = {0};
	if(number < 0) {lcd_ShowChar(x, y, color, size, '-'); number = -number;}
	else           lcd_ShowChar(x, y, color, size, ' ');
	
	for(uint8_t i=0; i<len-1; i++)
	{
		str[i] = (number/mypow(10,len-i-3))%10;
	}
	str[len-2] = str[len-3];

	for(uint8_t j=0; j<len-1; j++)
	{
		if(j != len-3)
		{		
		   if(str[j]%10 == 0)
		   {
			  lcd_ShowChar(x+size/2, y, color, size, '0'); //! 高位的0 显示
		   }
           else
		   {
	 	      lcd_ShowChar(x+size/2, y, color, size, str[j]%10+'0');				   
		   }   
		}
		else
		{
           lcd_ShowChar(x+size/2, y, color, size, '.');			
		}
		x+=size/2;
	} 	   
} 

		        
				  



/************************************************
lcd func: 显示一幅图片16位真彩色(取模时由下到上，左到右，大小为 dx*dy*2)
   (x,y): 图片起始坐标
 (dx,dy): 图片大小
      *p: 图片数组起始地址
************************************************/
void lcd_DrawBmp(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, const unsigned char *p)
{
  	uint16_t i; 
	unsigned char picH, picL; 
	
	setWindow(x, y, x+dx-1, y+dy-1);
    for(i=0; i<dx*dy; i++)
	{	
	 	picL = *(p+i*2);	
		picH = *(p+i*2+1);				
		writeData(picH<<8|picL);  						
	}	
	setWindow(0, 0, lcdtft.width-1, lcdtft.height-1); //! 恢复显示窗口为全屏
}

    

	
/************************************************
lcd func: 显示一幅图片256色(取模时由下到上，左到右，大小为 dx*dy)
   (x,y): 图片起始坐标
 (dx,dy): 图片大小
      *p: 图片数组起始地址
************************************************/	
void lcd_DrawBmp_256(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, const unsigned char *p)
{
  	uint16_t i; 
	unsigned char pic; 	
	setWindow(x, y, x+dx-1, y+dy-1);
    for(i=0; i<dx*dy; i++)
	{					
		pic = *(p+i);
		writeData(pic);  						
	}	
	setWindow(0, 0, lcdtft.width-1, lcdtft.height-1); //! 恢复显示窗口为全屏
}





/************************************************
  lcd func: 显示充电图标
      name: displayCharge
     (x,y): 起始坐标
	charge: 大于1000表示充电
************************************************/ 
void lcd_DrawCharge(uint16_t x, uint16_t y, uint16_t charge)
{	
	uint32_t  temp;
    uint8_t   pos, t; 	
	uint8_t   label[]={ //! 13*2=26
                        0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0xF8,0x01,0xFC,
						0x03,0xF8,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x00,0x00
	                  };
	
	if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return; 
	
	setWindow(x, y, x+12, y+12); //! 设置字体外框大小 高度=size 宽度=size
	
	if(charge >= 1000)
	{
	   for(pos=0; pos<13; pos++) //! 高度，即行数
	   {
		  temp = label[pos*2 + 1]<<8; //! 每个字符由26个字节组成
		  temp = temp | label[pos*2];		
	      for(t=0; t<13; t++)
	      {               
		     if(temp&0x01)
		     {
			    lcd_DrawPoint(x+t, y+pos, RED);	
		     }  
		     temp >>= 1; 
	      }
	   }		
	}
	else
	{
	   for(pos=0; pos<13; pos++) //! 高度，即行数
	   {
		  temp = label[pos*2 + 1]<<8; //! 每个字符由26个字节组成
		  temp = temp | label[pos*2];		
	      for(t=0; t<13; t++)
	      {               
		     if(temp&0x01)
		     {
			    lcd_DrawPoint(x+t, y+pos, BACKCOLOR);	
		     }  
		     temp >>= 1; 
	      }
	   }		
	}
	setWindow(0,0,lcdtft.width-1,lcdtft.height-1); //! 恢复窗口设置为全屏  	   	 	  
} 




/************************************************
lcd  func: 显示三角形光标
    (x,y): 字符位置起始坐标
    color: 画笔颜色
************************************************/
void lcd_ShowTriCursor(uint16_t x, uint16_t y, uint8_t dir, uint16_t color)
{
   uint32_t  temp;
   uint8_t  pos, t; 	
   if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return; 
	
   if(dir)
   {
	 setWindow(x-6, y-5, x+6, y+11); //! 设置字体外框大小 高：11 宽：6		
	 uint8_t buffer[11]={0x01,0x03,0x07,0x0F,0x1F,0x3F,0x1F,0x0F,0x07,0x03,0x01};	
	 for(pos=0; pos<11; pos++) //! 高度，即行数
	 {
		temp = buffer[pos];			
		for(t=0; t<6; t++)
		{               
		   if(temp&0x01)
		   {
			  lcd_DrawPoint(x-6+t, y-5+pos, color);	
		   }  
		   temp >>= 1; 
		}
	 }	   
   }
   else
   {
	  setWindow(x, y-5, x+6, y+11); //! 设置字体外框大小 高：11 宽：6				
	  uint8_t buffer[11]={0x20,0x30,0x38,0x3C,0x3E,0x3F,0x3E,0x3C,0x38,0x30,0x20};		
	  for(pos=0; pos<11; pos++) //! 高度，即行数
	  {
		temp = buffer[pos];			
		for(t=0; t<6; t++)
		{               
		  if(temp&0x01)
		  {
		    lcd_DrawPoint(x+t, y-5+pos, color);	
		  }  
		  temp >>= 1; 
		}
	  }	   
   }	   
   setWindow(0,0,lcdtft.width-1,lcdtft.height-1); //! 恢复窗口设置为全屏  	   	 	  
}



/************************************************
lcd  func: 显示圆形光标
    (x,y): 中心点坐标
    color: 画笔颜色
************************************************/
void lcd_ShowCircle(uint16_t x, uint16_t y, uint16_t color)
{
   uint32_t  temp;
   uint8_t  pos, t; 	
   if(x>(lcdtft.width-1)||y>(lcdtft.height-1)) return; 
	
   setWindow(x-7, y-7, x+7, y+7); //! 设置字体外框大小 高：15 宽：15		
   uint8_t buffer[30]={0x00,0x00,0xF0,0x07,0xF8,0x0F,0xFC,0x1F,0xFE,0x3F,0xFE,0x3F,0xFE,0x3F,0xFE,
                       0x3F,0xFE,0x3F,0xFE,0x3F,0xFE,0x3F,0xFC,0x1F,0xF8,0x0F,0xF0,0x07,0x00,0x00};	
   for(pos=0; pos<15; pos++) //! 高度，即行数
   {
	 temp = buffer[pos*2 + 1]<<8; 
	 temp = temp | buffer[pos*2];			
	 for(t=0; t<15; t++)
	 {               
	   if(temp&0x01)
	   {
		  lcd_DrawPoint(x-7+t, y-7+pos, color);	
	   }  
	   temp >>= 1; 
	 }
   }	   	   
setWindow(0,0,lcdtft.width-1,lcdtft.height-1); //! 恢复窗口设置为全屏  	   	 	  
}





